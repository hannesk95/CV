function ROIs = find_roi(tensor_l, tensor_r, scaling_factor, do_plot)
    if nargin < 4
        do_plot = false;
    end

    N = size(tensor_l, 3) - 1;
    I1 = tensor_l(:,:,1);
    img_width = size(I1, 2);
    img_height = size(I1, 1);
    
    % If we want to extend this function to return more than 1 ROI
    max_rois = 1;
    % ROIs contains { N x 1 is empty (logical), 2 x 2 x N boundary_box, 2 x n x N contour points }
    % for each ROI
    ROIs = cell(max_rois, 3);
    for i = 1:max_rois
        ROIs(i, :) = { false(N,1), zeros(2,2,N), cell(N,1) };
    end
    
    for i = 1:N
        I2 = tensor_l(:,:,i+1);
        
        tile_w = 5;
        tile_h = 5;
        ncc_matrix = correlation(I1,I2, [tile_w tile_h]);
        
        [rows, cols] = ind2sub(size(ncc_matrix), 1:numel(ncc_matrix));
        pts1 = [rows / size(ncc_matrix, 1);cols / size(ncc_matrix, 1);ncc_matrix(:)'];
        
        
        [labels,codebook] = simple_k_means(pts1, 2, [0.5,0.5;0.5,0.5;-1,1], 5, 100 );
        
        [~, idx_foreground] = min(codebook(3,:));
        
        tiles_foreground = find(labels == idx_foreground);
        
        % Scale to original size
        pts2 = pts2 / scaling_factor;
        
        % Boundary Box
        boundary_box = [ [ min(pts2(1,:)) min(pts2(2,:)) ]; ... % top-left
                       [ max(pts2(1,:)) max(pts2(2,:)) ] ];   % bottom-right
        boundary_boxes = cell2mat(ROIs(1,2));
        boundary_boxes(:,:,i) = boundary_box;
        ROIs(1,2) = { boundary_boxes };
        
        % Contour points
        contour_points = ROIs{1,3};
        contour_points{i} = { [pts2(1,contour); pts2(2,contour)] };
        ROIs(1,3) = { contour_points };
        
    end
end

